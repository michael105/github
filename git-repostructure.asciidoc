:hardbreaks:


__ ==== link:README.asciidoc[Index] | link:markup.textile[Markup] | link:git-shell.textile[git-shell] | link:git-repostructure.asciidoc[git-repostructure] ==== __



== About branches and repos..



____
Mainly I write this as memo to myself.

Did think about howto layout the branches best for minilib.

I came to the conclusion, the "master" branch shouldn't include all 
scripts and so on, I'm using for the development.

Furthermore, I like to check, whether the minilib compiles not only 
within the current working dir.

E.g., in the directory tools is the tool "shrinkelf".
Which shrinks elf binaries.

I did make the compile (mistakenly) dependent on this tool.

In the real development branch I didn't notice the dependency;
lthough I already made a simple test environment,
ll test went through without problem.

Only when I checked out later the updated master branch,
 realized, it wouldn't be possible to work with a copy of minilib
without getting error messages.


Since the interdependencies are already hard to track,
I did need a possibility to check.
____

So, here's my layout: (google wasn't soo helpful, so I better keep it here,
also for myself)


Keep a local repository directory: 
in the target dir, `git init --bare`

add this to the devel repo:
`git remote add local file://path-to-dir`

push there as normally.
Create a "git" subdirectory, containing two files:

_devel.files_
  include all filenames and paths there, 
	which are to be included in the devel-branch at github.

_master.files_
 all files, which are to be included in the devel and master branch.


create another directory, in this directory:
`git clone file://path-to-dir/reponame`


then .. 
Basically checkout git/master.files and git/devel.files
`git checkout origin/devel git`

checkout only these files
`git checkout origin/devel $(cat git/files)`


try whether everything's right.
`make test` or whatever

Then: `git push` to github.


So - that's how it is possible, to have different branches containing different filesets;
while also checking whether the filesets work.


It's also the way, how I can keep a repository tracking closely all the changes I do, 
while developing, while making clear it's a real "development branch"


So - there's 

- minilib/master
	The main branch, to be cloned, usable and tidy

- minilib/devel
	The devel branch; here are e.g. the scripts I use for generating headerfiles out of templates, and so on

- minilib/devel-HEAD
	My working backup dir.
	For others to see what I'm working on,
	as well as keeping a backup / being able to eventually revert changes I did.



link:README.asciidoc[Index] - link:markup.textile[Markup] - link:git-shell.textile[git-shell] - link:git-repostructure.asciidoc[git-repostructure]

asciidoc: ERROR: git-repostructure.asciidoc: line 8: only book doctypes can contain level 0 sections
asciidoc: ERROR: git-repostructure.asciidoc: line 8: only book doctypes can contain level 0 sections
asciidoc: ERROR: git-repostructure.asciidoc: line 2: [blockdef-literal] missing closing delimiter
